from fastapi import FastAPI, HTTPException
import requests
from pydantic import BaseModel

# Initialisation de l'application FastAPI
app = FastAPI(title="Role 8 - Argumentation Agent")

# Définition des URLs des autres services
ROLE5_API_URL = "http://localhost:8005/match"
ROLE6_API_URL = "http://localhost:8006/find_solution"
BROKER_API_URL = "http://localhost:8009/register"

# Modèle de données pour les requêtes utilisateur
class ArgumentRequest(BaseModel):
    session_id: str
    project_id: str
    message: str

class ArgumentResponse(BaseModel):
    response: str
    source: str

# Fonction pour enregistrer l'agent auprès du Broker (R9)
def register_with_broker():
    payload = {
        "agent_name": "Argumentation_Agent",
        "service": "argumentation",
        "description": "Processes user input and provides argumentation-based solutions."
    }
    try:
        response = requests.post(BROKER_API_URL, json=payload)
        response.raise_for_status()
        print("[INFO] Agent R8 enregistré avec succès auprès du Broker.")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Impossible d'enregistrer R8 auprès du Broker : {e}")

@app.on_event("startup")
def startup_event():
    register_with_broker()

# Fonction pour récupérer les scénarios pertinents depuis R5
def call_role5(project_id: str, message: str) -> list:
    payload = {"project_id": project_id, "user_input": [message]}
    try:
        response = requests.post(ROLE5_API_URL, json=payload)
        response.raise_for_status()
        return response.json()["matched_scenarios"]
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=f"Erreur R5: {e}")

# Fonction pour récupérer une solution argumentée depuis R6
def call_role6(project_id: str, matched_scenarios: list, user_input: list) -> str:
    payload = {
        "project_id": project_id,
        "user_input": user_input,
        "matched_scenarios": matched_scenarios,
        "info": "Generated by R8"
    }
    try:
        response = requests.post(ROLE6_API_URL, json=payload)
        response.raise_for_status()
        return response.json()["text"]
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=f"Erreur R6: {e}")

# Endpoint principal pour traiter les requêtes utilisateur
@app.post("/process", response_model=ArgumentResponse)
def process_argumentation_request(request: ArgumentRequest):
    matched_scenarios = call_role5(request.project_id, request.message)
    if not matched_scenarios:
        return {"response": "Aucun scénario correspondant trouvé.", "source": "R8"}
    solution = call_role6(request.project_id, matched_scenarios, [request.message])
    return {"response": solution, "source": "R8"}

# Lancer l'application FastAPI
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8008, reload=True)